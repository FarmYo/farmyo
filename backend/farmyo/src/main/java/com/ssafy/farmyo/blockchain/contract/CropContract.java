package com.ssafy.farmyo.blockchain.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.2.
 */
@SuppressWarnings("rawtypes")
public class CropContract extends Contract {
    public static final String BINARY = "6080604052348015600e575f80fd5b503360055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612d4b8061005c5f395ff3fe608060405234801561000f575f80fd5b50600436106100fe575f3560e01c806389812ad511610095578063bd23dbd311610064578063bd23dbd314610315578063cb31ef4c14610331578063e9945a3314610362578063ff9825511461037e576100fe565b806389812ad5146102605780638da5cb5b14610290578063a5f1e3ce146102ae578063b3d3b30c146102e1576100fe565b80636eeb466e116100d15780636eeb466e146101ae578063767e9c3a146101ca57806377a4296a146101fd5780637db6a1181461022d576100fe565b80631ee93ebb1461010257806320474e84146101325780632a749e4314610162578063668f2a7414610192575b5f80fd5b61011c60048036038101906101179190611b4e565b61039a565b6040516101299190611d35565b60405180910390f35b61014c60048036038101906101479190611b4e565b61054c565b6040516101599190611dbc565b60405180910390f35b61017c60048036038101906101779190611b4e565b6106bb565b6040516101899190611f18565b60405180910390f35b6101ac60048036038101906101a79190611f38565b6108fd565b005b6101c860048036038101906101c391906120a2565b610aa8565b005b6101e460048036038101906101df9190611f38565b610c80565b6040516101f494939291906121a4565b60405180910390f35b61021760048036038101906102129190611b4e565b610dde565b60405161022491906122ca565b60405180910390f35b61024760048036038101906102429190611f38565b610e70565b60405161025794939291906121a4565b60405180910390f35b61027a60048036038101906102759190611b4e565b610fce565b604051610287919061240c565b60405180910390f35b610298611180565b6040516102a5919061246b565b60405180910390f35b6102c860048036038101906102c39190611b4e565b6111a5565b6040516102d894939291906121a4565b60405180910390f35b6102fb60048036038101906102f69190611f38565b6112e8565b60405161030c959493929190612484565b60405180910390f35b61032f600480360381019061032a91906124ea565b6114d2565b005b61034b60048036038101906103469190611f38565b6116c7565b6040516103599291906125b5565b60405180910390f35b61037c600480360381019061037791906120a2565b61170d565b005b610398600480360381019061039391906120a2565b6118cb565b005b606060015f8381526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b82821015610541578382905f5260205f2090600402016040518060800160405290815f82015f9054906101000a900460ff1660ff1660ff16815260200160018201805461041890612609565b80601f016020809104026020016040519081016040528092919081815260200182805461044490612609565b801561048f5780601f106104665761010080835404028352916020019161048f565b820191905f5260205f20905b81548152906001019060200180831161047257829003601f168201915b505050505081526020016002820180546104a890612609565b80601f01602080910402602001604051908101604052809291908181526020018280546104d490612609565b801561051f5780601f106104f65761010080835404028352916020019161051f565b820191905f5260205f20905b81548152906001019060200180831161050257829003601f168201915b50505050508152602001600382015481525050815260200190600101906103cc565b505050509050919050565b610554611ae1565b5f808381526020019081526020015f206040518060800160405290815f82015f9054906101000a900460ff1660ff1660ff16815260200160018201805461059a90612609565b80601f01602080910402602001604051908101604052809291908181526020018280546105c690612609565b80156106115780601f106105e857610100808354040283529160200191610611565b820191905f5260205f20905b8154815290600101906020018083116105f457829003601f168201915b5050505050815260200160028201805461062a90612609565b80601f016020809104026020016040519081016040528092919081815260200182805461065690612609565b80156106a15780601f10610678576101008083540402835291602001916106a1565b820191905f5260205f20905b81548152906001019060200180831161068457829003601f168201915b505050505081526020016003820154815250509050919050565b606060035f8381526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b828210156108f2578382905f5260205f2090600502016040518060a00160405290815f82015f9054906101000a900460ff1660ff1660ff16815260200160018201805461073990612609565b80601f016020809104026020016040519081016040528092919081815260200182805461076590612609565b80156107b05780601f10610787576101008083540402835291602001916107b0565b820191905f5260205f20905b81548152906001019060200180831161079357829003601f168201915b505050505081526020016002820180546107c990612609565b80601f01602080910402602001604051908101604052809291908181526020018280546107f590612609565b80156108405780601f1061081757610100808354040283529160200191610840565b820191905f5260205f20905b81548152906001019060200180831161082357829003601f168201915b5050505050815260200160038201805461085990612609565b80601f016020809104026020016040519081016040528092919081815260200182805461088590612609565b80156108d05780601f106108a7576101008083540402835291602001916108d0565b820191905f5260205f20905b8154815290600101906020018083116108b357829003601f168201915b50505050508152602001600482015481525050815260200190600101906106ed565b505050509050919050565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461098c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610983906126a9565b60405180910390fd5b61099582611aa3565b6109d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cb90612737565b60405180910390fd5b5f60045f8481526020019081526020015f208054905014610a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a21906127c5565b60405180910390fd5b60045f8381526020019081526020015f206040518060400160405280600460ff16815260200183815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f015f6101000a81548160ff021916908360ff1602179055506020820151816001015550505050565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2e906126a9565b60405180910390fd5b610b4084611aa3565b610b7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7690612853565b60405180910390fd5b610b8884611ac2565b15610bc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbf906128e1565b60405180910390fd5b60025f8581526020019081526020015f206040518060800160405280600260ff16815260200185815260200184815260200183815250908060018154018082558091505060019003905f5260205f2090600402015f909190919091505f820151815f015f6101000a81548160ff021916908360ff1602179055506020820151816001019081610c579190612a9c565b506040820151816002019081610c6d9190612a9c565b5060608201518160030155505050505050565b6002602052815f5260405f208181548110610c99575f80fd5b905f5260205f2090600402015f9150915050805f015f9054906101000a900460ff1690806001018054610ccb90612609565b80601f0160208091040260200160405190810160405280929190818152602001828054610cf790612609565b8015610d425780601f10610d1957610100808354040283529160200191610d42565b820191905f5260205f20905b815481529060010190602001808311610d2557829003601f168201915b505050505090806002018054610d5790612609565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8390612609565b8015610dce5780601f10610da557610100808354040283529160200191610dce565b820191905f5260205f20905b815481529060010190602001808311610db157829003601f168201915b5050505050908060030154905084565b606060045f8381526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b82821015610e65578382905f5260205f2090600202016040518060400160405290815f82015f9054906101000a900460ff1660ff1660ff16815260200160018201548152505081526020019060010190610e10565b505050509050919050565b6001602052815f5260405f208181548110610e89575f80fd5b905f5260205f2090600402015f9150915050805f015f9054906101000a900460ff1690806001018054610ebb90612609565b80601f0160208091040260200160405190810160405280929190818152602001828054610ee790612609565b8015610f325780601f10610f0957610100808354040283529160200191610f32565b820191905f5260205f20905b815481529060010190602001808311610f1557829003601f168201915b505050505090806002018054610f4790612609565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7390612609565b8015610fbe5780601f10610f9557610100808354040283529160200191610fbe565b820191905f5260205f20905b815481529060010190602001808311610fa157829003601f168201915b5050505050908060030154905084565b606060025f8381526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b82821015611175578382905f5260205f2090600402016040518060800160405290815f82015f9054906101000a900460ff1660ff1660ff16815260200160018201805461104c90612609565b80601f016020809104026020016040519081016040528092919081815260200182805461107890612609565b80156110c35780601f1061109a576101008083540402835291602001916110c3565b820191905f5260205f20905b8154815290600101906020018083116110a657829003601f168201915b505050505081526020016002820180546110dc90612609565b80601f016020809104026020016040519081016040528092919081815260200182805461110890612609565b80156111535780601f1061112a57610100808354040283529160200191611153565b820191905f5260205f20905b81548152906001019060200180831161113657829003601f168201915b5050505050815260200160038201548152505081526020019060010190611000565b505050509050919050565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f602052805f5260405f205f91509050805f015f9054906101000a900460ff16908060010180546111d590612609565b80601f016020809104026020016040519081016040528092919081815260200182805461120190612609565b801561124c5780601f106112235761010080835404028352916020019161124c565b820191905f5260205f20905b81548152906001019060200180831161122f57829003601f168201915b50505050509080600201805461126190612609565b80601f016020809104026020016040519081016040528092919081815260200182805461128d90612609565b80156112d85780601f106112af576101008083540402835291602001916112d8565b820191905f5260205f20905b8154815290600101906020018083116112bb57829003601f168201915b5050505050908060030154905084565b6003602052815f5260405f208181548110611301575f80fd5b905f5260205f2090600502015f9150915050805f015f9054906101000a900460ff169080600101805461133390612609565b80601f016020809104026020016040519081016040528092919081815260200182805461135f90612609565b80156113aa5780601f10611381576101008083540402835291602001916113aa565b820191905f5260205f20905b81548152906001019060200180831161138d57829003601f168201915b5050505050908060020180546113bf90612609565b80601f01602080910402602001604051908101604052809291908181526020018280546113eb90612609565b80156114365780601f1061140d57610100808354040283529160200191611436565b820191905f5260205f20905b81548152906001019060200180831161141957829003601f168201915b50505050509080600301805461144b90612609565b80601f016020809104026020016040519081016040528092919081815260200182805461147790612609565b80156114c25780601f10611499576101008083540402835291602001916114c2565b820191905f5260205f20905b8154815290600101906020018083116114a557829003601f168201915b5050505050908060040154905085565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611561576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611558906126a9565b60405180910390fd5b61156a85611aa3565b6115a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a090612bdb565b60405180910390fd5b6115b285611ac2565b156115f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e9906128e1565b60405180910390fd5b60035f8681526020019081526020015f206040518060a00160405280600360ff16815260200186815260200185815260200184815260200183815250908060018154018082558091505060019003905f5260205f2090600502015f909190919091505f820151815f015f6101000a81548160ff021916908360ff16021790555060208201518160010190816116879190612a9c565b50604082015181600201908161169d9190612a9c565b5060608201518160030190816116b39190612a9c565b506080820151816004015550505050505050565b6004602052815f5260405f2081815481106116e0575f80fd5b905f5260205f2090600202015f9150915050805f015f9054906101000a900460ff16908060010154905082565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461179c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611793906126a9565b60405180910390fd5b6117a584611ac2565b156117e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117dc906128e1565b60405180910390fd5b5f805f8681526020019081526020015f20600301541461183a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183190612c69565b60405180910390fd5b60405180608001604052805f60ff168152602001848152602001838152602001828152505f808681526020019081526020015f205f820151815f015f6101000a81548160ff021916908360ff16021790555060208201518160010190816118a19190612a9c565b5060408201518160020190816118b79190612a9c565b506060820151816003015590505050505050565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461195a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611951906126a9565b60405180910390fd5b61196384611aa3565b6119a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199990612cf7565b60405180910390fd5b6119ab84611ac2565b156119eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e2906128e1565b60405180910390fd5b60015f8581526020019081526020015f206040518060800160405280600160ff16815260200185815260200184815260200183815250908060018154018082558091505060019003905f5260205f2090600402015f909190919091505f820151815f015f6101000a81548160ff021916908360ff1602179055506020820151816001019081611a7a9190612a9c565b506040820151816002019081611a909190612a9c565b5060608201518160030155505050505050565b5f805f808481526020019081526020015f206003015414159050919050565b5f8060045f8481526020019081526020015f2080549050119050919050565b60405180608001604052805f60ff16815260200160608152602001606081526020015f81525090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b611b2d81611b1b565b8114611b37575f80fd5b50565b5f81359050611b4881611b24565b92915050565b5f60208284031215611b6357611b62611b13565b5b5f611b7084828501611b3a565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f60ff82169050919050565b611bb781611ba2565b82525050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611bff82611bbd565b611c098185611bc7565b9350611c19818560208601611bd7565b611c2281611be5565b840191505092915050565b611c3681611b1b565b82525050565b5f608083015f830151611c515f860182611bae565b5060208301518482036020860152611c698282611bf5565b91505060408301518482036040860152611c838282611bf5565b9150506060830151611c986060860182611c2d565b508091505092915050565b5f611cae8383611c3c565b905092915050565b5f602082019050919050565b5f611ccc82611b79565b611cd68185611b83565b935083602082028501611ce885611b93565b805f5b85811015611d235784840389528151611d048582611ca3565b9450611d0f83611cb6565b925060208a01995050600181019050611ceb565b50829750879550505050505092915050565b5f6020820190508181035f830152611d4d8184611cc2565b905092915050565b5f608083015f830151611d6a5f860182611bae565b5060208301518482036020860152611d828282611bf5565b91505060408301518482036040860152611d9c8282611bf5565b9150506060830151611db16060860182611c2d565b508091505092915050565b5f6020820190508181035f830152611dd48184611d55565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f60a083015f830151611e1a5f860182611bae565b5060208301518482036020860152611e328282611bf5565b91505060408301518482036040860152611e4c8282611bf5565b91505060608301518482036060860152611e668282611bf5565b9150506080830151611e7b6080860182611c2d565b508091505092915050565b5f611e918383611e05565b905092915050565b5f602082019050919050565b5f611eaf82611ddc565b611eb98185611de6565b935083602082028501611ecb85611df6565b805f5b85811015611f065784840389528151611ee78582611e86565b9450611ef283611e99565b925060208a01995050600181019050611ece565b50829750879550505050505092915050565b5f6020820190508181035f830152611f308184611ea5565b905092915050565b5f8060408385031215611f4e57611f4d611b13565b5b5f611f5b85828601611b3a565b9250506020611f6c85828601611b3a565b9150509250929050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611fb482611be5565b810181811067ffffffffffffffff82111715611fd357611fd2611f7e565b5b80604052505050565b5f611fe5611b0a565b9050611ff18282611fab565b919050565b5f67ffffffffffffffff8211156120105761200f611f7e565b5b61201982611be5565b9050602081019050919050565b828183375f83830152505050565b5f61204661204184611ff6565b611fdc565b90508281526020810184848401111561206257612061611f7a565b5b61206d848285612026565b509392505050565b5f82601f83011261208957612088611f76565b5b8135612099848260208601612034565b91505092915050565b5f805f80608085870312156120ba576120b9611b13565b5b5f6120c787828801611b3a565b945050602085013567ffffffffffffffff8111156120e8576120e7611b17565b5b6120f487828801612075565b935050604085013567ffffffffffffffff81111561211557612114611b17565b5b61212187828801612075565b925050606061213287828801611b3a565b91505092959194509250565b61214781611ba2565b82525050565b5f82825260208201905092915050565b5f61216782611bbd565b612171818561214d565b9350612181818560208601611bd7565b61218a81611be5565b840191505092915050565b61219e81611b1b565b82525050565b5f6080820190506121b75f83018761213e565b81810360208301526121c9818661215d565b905081810360408301526121dd818561215d565b90506121ec6060830184612195565b95945050505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b604082015f8201516122325f850182611bae565b5060208201516122456020850182611c2d565b50505050565b5f612256838361221e565b60408301905092915050565b5f602082019050919050565b5f612278826121f5565b61228281856121ff565b935061228d8361220f565b805f5b838110156122bd5781516122a4888261224b565b97506122af83612262565b925050600181019050612290565b5085935050505092915050565b5f6020820190508181035f8301526122e2818461226e565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f608083015f8301516123285f860182611bae565b50602083015184820360208601526123408282611bf5565b9150506040830151848203604086015261235a8282611bf5565b915050606083015161236f6060860182611c2d565b508091505092915050565b5f6123858383612313565b905092915050565b5f602082019050919050565b5f6123a3826122ea565b6123ad81856122f4565b9350836020820285016123bf85612304565b805f5b858110156123fa57848403895281516123db858261237a565b94506123e68361238d565b925060208a019950506001810190506123c2565b50829750879550505050505092915050565b5f6020820190508181035f8301526124248184612399565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6124558261242c565b9050919050565b6124658161244b565b82525050565b5f60208201905061247e5f83018461245c565b92915050565b5f60a0820190506124975f83018861213e565b81810360208301526124a9818761215d565b905081810360408301526124bd818661215d565b905081810360608301526124d1818561215d565b90506124e06080830184612195565b9695505050505050565b5f805f805f60a0868803121561250357612502611b13565b5b5f61251088828901611b3a565b955050602086013567ffffffffffffffff81111561253157612530611b17565b5b61253d88828901612075565b945050604086013567ffffffffffffffff81111561255e5761255d611b17565b5b61256a88828901612075565b935050606086013567ffffffffffffffff81111561258b5761258a611b17565b5b61259788828901612075565b92505060806125a888828901611b3a565b9150509295509295909350565b5f6040820190506125c85f83018561213e565b6125d56020830184612195565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061262057607f821691505b602082108103612633576126326125dc565b5b50919050565b7f546869732066756e6374696f6e2063616e2062652063616c6c656420627920745f8201527f6865206f776e6572206f6e6c792e000000000000000000000000000000000000602082015250565b5f612693602e8361214d565b915061269e82612639565b604082019050919050565b5f6020820190508181035f8301526126c081612687565b9050919050565b7f506c616e74696e67496e666f206d75737420657869737420746f2061646420485f8201527f617276657374496e666f2e000000000000000000000000000000000000000000602082015250565b5f612721602b8361214d565b915061272c826126c7565b604082019050919050565b5f6020820190508181035f83015261274e81612715565b9050919050565b7f48617276657374496e666f20616c72656164792065786973747320666f7220745f8201527f68697320504b2e00000000000000000000000000000000000000000000000000602082015250565b5f6127af60278361214d565b91506127ba82612755565b604082019050919050565b5f6020820190508181035f8301526127dc816127a3565b9050919050565b7f506c616e74696e67496e666f206d75737420657869737420746f2061646420635f8201527f6f6e74657374496e666f2e000000000000000000000000000000000000000000602082015250565b5f61283d602b8361214d565b9150612848826127e3565b604082019050919050565b5f6020820190508181035f83015261286a81612831565b9050919050565b7f43616e6e6f7420616464206e657720696e666f206166746572206861727665735f8201527f742e000000000000000000000000000000000000000000000000000000000000602082015250565b5f6128cb60228361214d565b91506128d682612871565b604082019050919050565b5f6020820190508181035f8301526128f8816128bf565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261295b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612920565b6129658683612920565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6129a061299b61299684611b1b565b61297d565b611b1b565b9050919050565b5f819050919050565b6129b983612986565b6129cd6129c5826129a7565b84845461292c565b825550505050565b5f90565b6129e16129d5565b6129ec8184846129b0565b505050565b5b81811015612a0f57612a045f826129d9565b6001810190506129f2565b5050565b601f821115612a5457612a25816128ff565b612a2e84612911565b81016020851015612a3d578190505b612a51612a4985612911565b8301826129f1565b50505b505050565b5f82821c905092915050565b5f612a745f1984600802612a59565b1980831691505092915050565b5f612a8c8383612a65565b9150826002028217905092915050565b612aa582611bbd565b67ffffffffffffffff811115612abe57612abd611f7e565b5b612ac88254612609565b612ad3828285612a13565b5f60209050601f831160018114612b04575f8415612af2578287015190505b612afc8582612a81565b865550612b63565b601f198416612b12866128ff565b5f5b82811015612b3957848901518255600182019150602085019450602081019050612b14565b86831015612b565784890151612b52601f891682612a65565b8355505b6001600288020188555050505b505050505050565b7f506c616e74696e67496e666f206d75737420657869737420746f2061646420695f8201527f6e7370656374496e666f2e000000000000000000000000000000000000000000602082015250565b5f612bc5602b8361214d565b9150612bd082612b6b565b604082019050919050565b5f6020820190508181035f830152612bf281612bb9565b9050919050565b7f506c616e74696e67496e666f20616c72656164792065786973747320666f72205f8201527f7468697320504b2e000000000000000000000000000000000000000000000000602082015250565b5f612c5360288361214d565b9150612c5e82612bf9565b604082019050919050565b5f6020820190508181035f830152612c8081612c47565b9050919050565b7f506c616e74696e67496e666f206d75737420657869737420746f2061646420555f8201527f73616765496e666f2e0000000000000000000000000000000000000000000000602082015250565b5f612ce160298361214d565b9150612cec82612c87565b604082019050919050565b5f6020820190508181035f830152612d0e81612cd5565b905091905056fea264697066735822122066c3a849118dc485bb357352dd8b7eed7c9b8cc886c7a7b52d3e6e4272036b1364736f6c63430008190033";

    public static final String FUNC_ADDCERTINFO = "addCertInfo";

    public static final String FUNC_ADDHARVESTINFO = "addHarvestInfo";

    public static final String FUNC_ADDINSPECTINFO = "addInspectInfo";

    public static final String FUNC_ADDPLANTINGINFO = "addPlantingInfo";

    public static final String FUNC_ADDUSAGEINFO = "addUsageInfo";

    public static final String FUNC_CERTINFOS = "certInfos";

    public static final String FUNC_GETCERTINFOS = "getCertInfos";

    public static final String FUNC_GETHARVESTINFOS = "getHarvestInfos";

    public static final String FUNC_GETINSEPCTINFOS = "getInsepctInfos";

    public static final String FUNC_GETPLANTINGINFOS = "getPlantingInfos";

    public static final String FUNC_GETUSAGEINFOS = "getUsageInfos";

    public static final String FUNC_HARVESTINFOS = "harvestInfos";

    public static final String FUNC_INSPECTINFOS = "inspectInfos";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PLANTINGINFOS = "plantingInfos";

    public static final String FUNC_USAGEINFOS = "usageInfos";

    @Deprecated
    protected CropContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CropContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CropContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CropContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> addCertInfo(BigInteger _cropPK, String _certName, String _certCorp, BigInteger _eventDate) {
        final Function function = new Function(
                FUNC_ADDCERTINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_cropPK), 
                new org.web3j.abi.datatypes.Utf8String(_certName), 
                new org.web3j.abi.datatypes.Utf8String(_certCorp), 
                new org.web3j.abi.datatypes.generated.Uint256(_eventDate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addHarvestInfo(BigInteger _cropPK, BigInteger _eventDate) {
        final Function function = new Function(
                FUNC_ADDHARVESTINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_cropPK), 
                new org.web3j.abi.datatypes.generated.Uint256(_eventDate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addInspectInfo(BigInteger _cropPK, String _inspectName, String _inspectResult, String _inspectCorp, BigInteger _eventDate) {
        final Function function = new Function(
                FUNC_ADDINSPECTINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_cropPK), 
                new org.web3j.abi.datatypes.Utf8String(_inspectName), 
                new org.web3j.abi.datatypes.Utf8String(_inspectResult), 
                new org.web3j.abi.datatypes.Utf8String(_inspectCorp), 
                new org.web3j.abi.datatypes.generated.Uint256(_eventDate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addPlantingInfo(BigInteger _cropPK, String _cropName, String _land, BigInteger _eventDate) {
        final Function function = new Function(
                FUNC_ADDPLANTINGINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_cropPK), 
                new org.web3j.abi.datatypes.Utf8String(_cropName), 
                new org.web3j.abi.datatypes.Utf8String(_land), 
                new org.web3j.abi.datatypes.generated.Uint256(_eventDate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addUsageInfo(BigInteger _cropPK, String _pesticideName, String _pesticideType, BigInteger _eventDate) {
        final Function function = new Function(
                FUNC_ADDUSAGEINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_cropPK), 
                new org.web3j.abi.datatypes.Utf8String(_pesticideName), 
                new org.web3j.abi.datatypes.Utf8String(_pesticideType), 
                new org.web3j.abi.datatypes.generated.Uint256(_eventDate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, String, String, BigInteger>> certInfos(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_CERTINFOS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, String, String, BigInteger>>(function,
                new Callable<Tuple4<BigInteger, String, String, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getCertInfos(BigInteger _cropPK) {
        final Function function = new Function(FUNC_GETCERTINFOS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_cropPK)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<CertInfo>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getHarvestInfos(BigInteger _cropPK) {
        final Function function = new Function(FUNC_GETHARVESTINFOS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_cropPK)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<HarvestInfo>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getInsepctInfos(BigInteger _cropPK) {
        final Function function = new Function(FUNC_GETINSEPCTINFOS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_cropPK)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<InspectInfo>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<PlantingInfo> getPlantingInfos(BigInteger _cropPK) {
        final Function function = new Function(FUNC_GETPLANTINGINFOS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_cropPK)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<PlantingInfo>() {}));
        return executeRemoteCallSingleValueReturn(function, PlantingInfo.class);
    }

    public RemoteFunctionCall<List> getUsageInfos(BigInteger _cropPK) {
        final Function function = new Function(FUNC_GETUSAGEINFOS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_cropPK)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<UsageInfo>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> harvestInfos(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_HARVESTINFOS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple5<BigInteger, String, String, String, BigInteger>> inspectInfos(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_INSPECTINFOS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, String, String, String, BigInteger>>(function,
                new Callable<Tuple5<BigInteger, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, String, String, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, String, String, BigInteger>> plantingInfos(BigInteger param0) {
        final Function function = new Function(FUNC_PLANTINGINFOS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, String, String, BigInteger>>(function,
                new Callable<Tuple4<BigInteger, String, String, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<BigInteger, String, String, BigInteger>> usageInfos(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_USAGEINFOS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, String, String, BigInteger>>(function,
                new Callable<Tuple4<BigInteger, String, String, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    @Deprecated
    public static CropContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CropContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CropContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CropContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CropContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CropContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CropContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CropContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CropContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CropContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<CropContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CropContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CropContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CropContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CropContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CropContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class CertInfo extends DynamicStruct {
        public BigInteger infoType;

        public String CertName;

        public String CertCorp;

        public BigInteger eventDate;

        public CertInfo(BigInteger infoType, String CertName, String CertCorp, BigInteger eventDate) {
            super(new org.web3j.abi.datatypes.generated.Uint8(infoType), 
                    new org.web3j.abi.datatypes.Utf8String(CertName), 
                    new org.web3j.abi.datatypes.Utf8String(CertCorp), 
                    new org.web3j.abi.datatypes.generated.Uint256(eventDate));
            this.infoType = infoType;
            this.CertName = CertName;
            this.CertCorp = CertCorp;
            this.eventDate = eventDate;
        }

        public CertInfo(Uint8 infoType, Utf8String CertName, Utf8String CertCorp, Uint256 eventDate) {
            super(infoType, CertName, CertCorp, eventDate);
            this.infoType = infoType.getValue();
            this.CertName = CertName.getValue();
            this.CertCorp = CertCorp.getValue();
            this.eventDate = eventDate.getValue();
        }
    }

    public static class HarvestInfo extends StaticStruct {
        public BigInteger infoType;

        public BigInteger eventDate;

        public HarvestInfo(BigInteger infoType, BigInteger eventDate) {
            super(new org.web3j.abi.datatypes.generated.Uint8(infoType), 
                    new org.web3j.abi.datatypes.generated.Uint256(eventDate));
            this.infoType = infoType;
            this.eventDate = eventDate;
        }

        public HarvestInfo(Uint8 infoType, Uint256 eventDate) {
            super(infoType, eventDate);
            this.infoType = infoType.getValue();
            this.eventDate = eventDate.getValue();
        }
    }

    public static class InspectInfo extends DynamicStruct {
        public BigInteger infoType;

        public String inspectName;

        public String inspectResult;

        public String inspectCorp;

        public BigInteger eventDate;

        public InspectInfo(BigInteger infoType, String inspectName, String inspectResult, String inspectCorp, BigInteger eventDate) {
            super(new org.web3j.abi.datatypes.generated.Uint8(infoType), 
                    new org.web3j.abi.datatypes.Utf8String(inspectName), 
                    new org.web3j.abi.datatypes.Utf8String(inspectResult), 
                    new org.web3j.abi.datatypes.Utf8String(inspectCorp), 
                    new org.web3j.abi.datatypes.generated.Uint256(eventDate));
            this.infoType = infoType;
            this.inspectName = inspectName;
            this.inspectResult = inspectResult;
            this.inspectCorp = inspectCorp;
            this.eventDate = eventDate;
        }

        public InspectInfo(Uint8 infoType, Utf8String inspectName, Utf8String inspectResult, Utf8String inspectCorp, Uint256 eventDate) {
            super(infoType, inspectName, inspectResult, inspectCorp, eventDate);
            this.infoType = infoType.getValue();
            this.inspectName = inspectName.getValue();
            this.inspectResult = inspectResult.getValue();
            this.inspectCorp = inspectCorp.getValue();
            this.eventDate = eventDate.getValue();
        }
    }

    public static class PlantingInfo extends DynamicStruct {
        public BigInteger infoType;

        public String cropName;

        public String land;

        public BigInteger eventDate;

        public PlantingInfo(BigInteger infoType, String cropName, String land, BigInteger eventDate) {
            super(new org.web3j.abi.datatypes.generated.Uint8(infoType), 
                    new org.web3j.abi.datatypes.Utf8String(cropName), 
                    new org.web3j.abi.datatypes.Utf8String(land), 
                    new org.web3j.abi.datatypes.generated.Uint256(eventDate));
            this.infoType = infoType;
            this.cropName = cropName;
            this.land = land;
            this.eventDate = eventDate;
        }

        public PlantingInfo(Uint8 infoType, Utf8String cropName, Utf8String land, Uint256 eventDate) {
            super(infoType, cropName, land, eventDate);
            this.infoType = infoType.getValue();
            this.cropName = cropName.getValue();
            this.land = land.getValue();
            this.eventDate = eventDate.getValue();
        }
    }

    public static class UsageInfo extends DynamicStruct {
        public BigInteger infoType;

        public String pesticideName;

        public String pesticideType;

        public BigInteger eventDate;

        public UsageInfo(BigInteger infoType, String pesticideName, String pesticideType, BigInteger eventDate) {
            super(new org.web3j.abi.datatypes.generated.Uint8(infoType), 
                    new org.web3j.abi.datatypes.Utf8String(pesticideName), 
                    new org.web3j.abi.datatypes.Utf8String(pesticideType), 
                    new org.web3j.abi.datatypes.generated.Uint256(eventDate));
            this.infoType = infoType;
            this.pesticideName = pesticideName;
            this.pesticideType = pesticideType;
            this.eventDate = eventDate;
        }

        public UsageInfo(Uint8 infoType, Utf8String pesticideName, Utf8String pesticideType, Uint256 eventDate) {
            super(infoType, pesticideName, pesticideType, eventDate);
            this.infoType = infoType.getValue();
            this.pesticideName = pesticideName.getValue();
            this.pesticideType = pesticideType.getValue();
            this.eventDate = eventDate.getValue();
        }
    }
}
